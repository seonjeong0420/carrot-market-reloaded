generator client {
  provider = "prisma-client-js"
}

// sqlite : 프로젝트 내부에 database 파일 갖고 있으면 된다.
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement()) // 첫번째 사용자의 id는 자동으로 1 설정
  username String @unique
  email String? @unique // sms으로 로그인 할 수도 있기 때문에 선택값
  password String? // sms으로 로그인 할 수도 있기 때문에 선택값
  phone String? @unique
  github_id String? @unique
  avatar String? @default("http://dkdkdkdkdk.com/dldl.jpg")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt // 사용자의 수정이 있을 때마다 시간 저장
  SMSToken SMSToken[]
  Product Product[]
  Post Post[]
  Comment Comment[]
  Like Like[]
}

// onDelete Cascade : 부모 model이 삭제되었을 때 자식 model도 자동으로 delete 할 수 있는 속성
model SMSToken {
  id Int @id @default(autoincrement())
  token String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  title String
  price Float
  description String
  photo String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  Comment Comment[]
  Like Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}


model Like {
  @@id(name: "id", [userId, postId])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}